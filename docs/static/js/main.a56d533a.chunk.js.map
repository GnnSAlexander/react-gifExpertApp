{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAiBhD,OACI,0BAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,YCOjBG,MATf,YAA0C,EAAnBC,GAAoB,IAAhBC,EAAe,EAAfA,MAAQC,EAAO,EAAPA,IAC/B,OACI,yBAAKC,UAAU,2CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCXHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAGCG,MAAOR,GAHR,cAGbS,EAHa,gBAKKA,EAAKC,OALV,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXvB,kBAeZY,GAfY,4CAAH,sDCiCLK,MAvBf,YAAkC,IAAdZ,EAAa,EAAbA,SAAa,ECPL,SAAEA,GAAc,IAAD,EACbrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAW,WAEPjB,EAASC,GACJiB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACpBT,KAAKY,EACLL,SAAS,SAGlB,CAACb,IAEGc,EDPyBK,CAAanB,GAAjCU,EAFiB,EAEtBJ,KAAaO,EAFS,EAETA,QAUpB,OACI,oCACI,wBAAIjB,UAAU,qCAAqCI,GACjDa,GAAW,uBAAGjB,UAAU,oCAAb,gBACb,yBAAKA,UAAU,aAVfc,EAAOF,KAAK,SAAAC,GAAG,OACZ,kBAAC,EAAD,eAAaW,IAAKX,EAAIhB,IAAQgB,UEiB9BY,MA9Bf,SAAsBC,GAAQ,IAAD,EAEW3C,mBAAS,CAAE,cAFtB,mBAElB4C,EAFkB,KAEN7C,EAFM,KAUzB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEI6C,EAAWf,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIoB,IAAKpB,EACLA,SAAUA,UCpBlCwB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.a56d533a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState(\"\")\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value )\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault()\n        if( inputValue.trim().length > 2 ){\n            setCategories( cats => [inputValue,...cats] )\n            setInputValue('')\n        }\n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }/>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nGifGridItem.propTypes = {\n    \n};\n\nfunction GifGridItem( {id, title , url} ) {\n    return (\n        <div className=\"card animate__animated animate__fadeIn \">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    );\n}\n\nexport default GifGridItem;","export const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=B9D5Td9Pupyjb9uIhMU0qyLcXGTiSBhK`\n\n    const resp =  await fetch( url )\n\n    const { data } =  await resp.json()\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs\n}","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nGifGrid.propTypes = {\n    \n};\n\nfunction GifGrid( { category } ) {\n\n   const { data:images, loading } = useFetchGifs(category)\n\n   const renderImages = () => {\n        return (\n            images.map( img => (\n               <GifGridItem key={img.id} {...img} />\n            ))\n        )\n   }\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash\"> Cargando...</p>}\n            <div className=\"card-grid\">\n                    {renderImages()}\n            </div>\n        </>\n    );\n}\n\nexport default GifGrid;","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) =>{\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => setState({\n                data:imgs,\n                loading: false\n            }))\n\n    }, [category])\n\n    return state\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nfunction GifExpertApp(props) {\n\n    const [categories, setCategories] = useState([ 'One Punch' ])\n\n    // const handleAdd = () =>{\n    //     //setCategories( [...categories, 'X-men'] )\n\n    //     setCategories( cats => [...cats, 'X-men'] )\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n            \n            <ol>\n            {\n                categories.map( category => (\n                    <GifGrid \n                        key={category}\n                        category={category}/>\n                ))\n            }\n            </ol>\n            \n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp  from \"./GifExpertApp\";\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}